
Program ::= (Package-Declaration ";")* Command


Command         ::= single-Command
                |   Command ; single-Command


single-Command  ::= "nothing"
                |   V-name ":=" Expression
                |   Long-Identifier "(" Actual-Parameter-Sequence ")"
                |   "let" Declaration "in" Command "end"
                |   "if" Expression "then" Command ("elsif" Expression "then" Command)*
                        "else" Command "end" 
                |   "choose" Expression "from" Cases "end"
                |   "loop" "while" Expression "do" Command "end"
                |   "loop" "until" Expression "do" Command "end"
                |   "loop" "do" Command ("while" Expression "end" | "until" Expression "end")
                |   "loop" "for" Identifier "from" Expression "to" Expression
                        ("do" command "end" | "while" Expression "do" Command "end" | "until" Expression "do" Command "end")


Cases           ::= Case+ [ ElseCase ] 
Case            ::= "when" Case-Literals "then" Command 
ElseCase        ::= "else" Command 
Case-Literals   ::= Case-Range ("|" Case-Range)* 
Case-Range      ::= Case-Literal [".." Case-Literal] 
Case-Literal    ::= Integer-Literal | Character-Literal

Expression		::= secondary-Expression
			 |  "let" Declaration "in" Expression
			 |  "if" Expression "then" Expression "else" Expression

secondary-Expression ::= primary-Expression
			 |  secondary-Expression Operator primary-Expression


primary-Expression ::= Integer-Literal
			 |  Character-Literal
			 |  V-name
			 |  Long-Identifier "(" Actual-Parameter-Sequence ")"
			 |  Operator primary-Expression
			 |  ( Expression )
			 |  { Record-Aggregate }
			 |  [ Array-Aggregate ]

Record-Aggregate	::= Identifier ~ Expression
			 |  Identifier ~ Expression , Record-Aggregate

Array-Aggregate	::= Expression
			 |  Expression , Array-Aggregate


V-name ::= [ Package-Identifier "$" ] Var-Name
Var-name ::= Identifier
                | Var-name "." Identifier
                | Var-name "[" Expression "]"

Declaration     ::= compound-Declaration
                |   Declaration ";" compound-Declaration 


single-Declaration ::= "const" Identifier "~" Expression
			 |  "var" Identifier  (":" Type-denoter | ":=" Expression)
                         |  "proc" Identifier "(" Formal-Parameter-Sequence ")" "~" Command "end"
			 |  "func" Identifier "(" Formal-Parameter-Sequence ")" ":" Type-denoter "~" Expression
			 |  "type" Identifier "~" Type-denoter

compound-Declaration    ::= single-Declaration
                        |   "recursive" Proc-Funcs "end"
                        |   "private" Declaration "in" Declaration "end"    

Proc-Func       ::= "proc" Identifier "(" Formal-Parameter-Sequence ")" 
                        "~" Command "end"
                |   "func" Identifier "(" Formal-Parameter-Sequence ")" 
                        ":" Type-denoter "~" Expression

Proc-Funcs      ::= Proc-Func ("|" Proc-Func)+     

Formal-Parameter-Sequence ::= 
			 |  proper-Formal-Parameter-Sequence

proper-Formal-Parameter-Sequence ::= Formal-Parameter
			 |  Formal-Parameter , proper-Formal-Parameter-Sequence

Formal-Parameter	::= Identifier : Type-denoter
			 |  "var" Identifier : Type-denoter
			 |  "proc" Identifier ( Formal-Parameter-Sequence )
			 |  "func" Identifier ( Formal-Parameter-Sequence )
				: Type-denoter

Actual-Parameter-Sequence ::= 
			 |  proper-Actual-Parameter-Sequence

proper-Actual-Parameter-Sequence ::= Actual-Parameter
			 |  Actual-Parameter , proper-Actual-Parameter-Sequence

Actual-Parameter	::= Expression
			 |  "var" V-name
			 |  "proc" Identifier
			 |  "func" Identifier


Type-denoter ::= Long-Identifier
                | "array" Integer-Literal "of" Type-denoter
                | "record" Record-Type-denoter "end"

Record-Type-Denoter	::= Identifier : Type-denoter
			 |  Identifier : Type-denoter , Record-Type-denoter


Package-Declaration ::= "package" Package-Identifier "~" Declaration "end" 
Long-Identifier ::= [ Package-Identifier "$" ] Identifier
Package-Identifier ::= Identifier



                
       